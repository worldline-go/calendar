import{_ as s,c as e,o as n,ag as t}from"./chunks/framework.CazwtNDk.js";const u=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"quickstart.md","filePath":"quickstart.md","lastUpdated":1745286723000}'),o={name:"quickstart.md"};function l(r,a,p,i,c,d){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>This service is written in <a href="https://golang.org/" target="_blank" rel="noreferrer">Go</a> and does not require any additional dependencies to run.<br> Storage need <a href="https://www.postgresql.org/" target="_blank" rel="noreferrer">PostgreSQL</a>.</p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><h3 id="binary" tabindex="-1">Binary <a class="header-anchor" href="#binary" aria-label="Permalink to &quot;Binary&quot;">​</a></h3><p>Download the latest release from <a href="https://github.com/worldline-go/calendar/releases/latest" target="_blank" rel="noreferrer">GitHub</a></p><p>Extract it from archive and before to run, you need to have configuration file.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Give the path to the configuration file using <code>CONFIG_FILE</code> environment variable or use default file name <code>calendar.[toml|yaml|yml|json]</code> in the current directory.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">log_level</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> info</span></span>
<span class="line"><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 8080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">db_type</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> pgx</span></span>
<span class="line"><span style="color:#F07178;">db_datasource</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> postgres://postgres@localhost:5432/postgres?sslmode=disable</span><span style="color:#546E7A;font-style:italic;"> # default is empty</span></span>
<span class="line"><span style="color:#F07178;">db_schema</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> public</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">migrate</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  db_datasource</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> postgres://postgres@localhost:5432/postgres?sslmode=disable</span><span style="color:#546E7A;font-style:italic;"> # default is empty</span></span>
<span class="line"><span style="color:#F07178;">  db_type</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> pgx</span></span>
<span class="line"><span style="color:#F07178;">  db_schema</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> public</span></span>
<span class="line"><span style="color:#F07178;">  db_table</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> calendar_migrations</span></span></code></pre></div><blockquote><p>Configuration migration&#39;s connect and database&#39;s connect are separated.</p></blockquote>`,10)]))}const g=s(o,[["render",l]]);export{u as __pageData,g as default};
